02

SELECT 질의결과 사용하기
	JDBC에서 SELECT 질의명령을 보내면 그 결과(인라인테이블)을
	(이때 만들어지는 인러인 테이블은 메모리에 저장된다)
	ResultSet이라는 인터페이스가 관리하도록 하고있다.
	우리는 ResultSet이라는 인터페이스를 이용해서 인라인테이블의 결과 중
	필요한 데이터를 선택 후 사용할 수 있게된다.
	인라인테이블의 결과 중에서 원하는 데이터를 꺼내는 방법은
	"몇번째 줄에 몇번째 칸의 데이터를 꺼내주세요." 가 아닌
	"현재 작업둘의 몇번째 칸의 데이터를 꺼내주세요.." 라는 방식임
	이때 '몇 번째 칸'의 의미는 [질의명령중 SELECT절에 나열된 필드의 순서]*
	(현재 작업줄: 가상의 레코드 포인터 라고 표현한다.)
	
	주요함수]
		1. 가상의 레코드 포인터(현재작업위치(커서))를 이동시키는 명령
			absolute(int row)
				지정한 줄로 이동
			afterLast()
				EOF(End of File)로 이동
			beforeFirst()
				BOF(Begin of First)로 이동 
			first()
				첫번째 행으로 이동
			last()
				마지막 행으로 이동
			next()
				현재작업줄에서 다음줄로 이동
			previous()
				현재작업줄에서 바로 이전줄로 이동
	참고]
		afterLast()
		beforeFirst()
			위 두개는 항상 이동에 성공한다. ->이유는
			BOF, EOF는 인라인테이블이 만들어질때 자바가 자동으로 만들어주는 가상의 위치라서
		이 외의 함수들은 이동에 실패할 수 있다.
		
		2.데이터를 꺼내는 함수
			getXXX()
				XXX는 꺼낼 데이터를 사용할 데이터형태이름
					주의사항:실제 데이터베이스에서 사용하던 타입이 아닌,
					자바에서 사용ㅎ는 타입이 될 것
					(데이터베이스에 있는 형태와 달라도 바꾸면 되니까 상관x)
				예]
					나이를 꺼내고 싶다.
						db에서는 NUMBER타입으로,
						JDBC에서는 int로
					급여를 꺼내고 싶다.
						DB에서는 NUMBER 타입으로
						JDBC에서는 LONG(int)타입으로
				참고]
					꺼내는 방식
					1)getXXX(int 위치)
						이때 위치값- 자바는인덱스가0부터 시작하지만
						JDBC는 위치값 인덱스를 1부터 시작한다.
						그리고 위치값은 SELECT절에서 나열한 필드의 순서를 의미한다.
					2)getXXX(String 필드이름)
						필드이름으로 꺼내는 방식
				주의]
					질의명령이
					SELECT
						ename as 이름
					FROM
						emp
					; 
					으로 조회한 경우, 꺼낼때 
					getString("ename");  <- X
					getString("이름");   <- O(별칭을 썼으면 별칭으로)
					
		정리
			SELECT 질의명령을 실행하면 ResultSet으로 결과가 만들어지고
			먼저 필요한 행으로 레코드 포인터를 이동한 후 필요한 데이터를 하나씩 꺼내야 한다.
			
PreparedStatement
	질의명령을 데이터베이스에게 전달하는 Statement의 일종임.
	Statement의 불편한 점은 질의명령을 수행할 때 마다 매번 질의명령을 DB에게 전달하는 형식
	그런데 질의명령이 매우 긴 경우도 있지,
	그런데 DB는 서버는 네트워크를 사용한다.
	
	문제점을 해결하기 위한 다른 Statement를 준비했다 그것이
	PreparedStatement이다. 미리 질의명령부터 알려준 다음에 실행이 필요하면 실행만 요구하면 된다.
	매번 질의명령을 알려준 필요가 없다.
	작업을 하다보면 매번 같은 질의명령을 실행할 필요다 있을 때가 있다.
	그런데 일반 Statement로는 매번 같은 질의명령이라도 다시 보내야 한다.
	이런경우 미리 질의명령을 알려주는 전속 Statement를 만들어 놓고 질의명령은  보내지 말고 실행만 부탁한다면
	처리속도가 그만큼 빨라지고 코드 작성도 편리해 지겠지 ??
만드는법
	con.preparedStatement();
참고]
	자주 사용되는 질의명령이라도 데이터는 달라질 수 있다.
	이 문제를 해결하는 방법으로 질의명령을 만들대 변화되는
	데이터 부분은 ?? 물음표로 대신하면 되겠다.
	이후에 물음표 부분만 질의명령을 실행하기 직전에 채워넣고 질의명령을
	실행하는 방식을 사용하고 있다.
예]
	String sql = "SELECT * FROM emp WHERE ename = ? "
	
주요함수]
	물음표 채워주는 함수
	setXXX(위치값, 데이터);
	XXX는 채울 데이터의 자바 타입을 선택한다.
	위치는 물음표의 위치

참고]
	Statement는 속도는 느리지만 매번 다른 질의명령을 처리할 수 있다.
	PreparedStatement는 속도는 빠르지만 항상 동일한 질의명령만 처리할 수 있다.




























