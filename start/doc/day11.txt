#day11

this
	의미 - 현재실행중인 객체의 주소를 기억하기로 약속된 변수.
	이것은 JVM이 클래스를 처리하기 위해서 JVM이 사용하는 변수임//클립보드같은건가??
	개발자가 사용할 일은 별로 없음
규칙
	1.모든 멤버는 사용할 때 반드시 앞에 주소가 있어야 한다.
		멤버는 클래스 안에 만들어진 변수나 함수를 이야기한다.
		따라서new시킨 후 그 주소를 기억해 두었다가, 기억한 주소를 이용해서 쓰는 것
	2. 만약 주소가 없으면 JVM이 자동으로 this를 붙여준다.
	3. 멤버 함수를 호출할 때는 무조건 주소값을 함수에 알려주도록 약속이 되어있음
		함수는 this변수를 준비한 후, 함수를 호출할 때 알려준 주소를 기억하게 된다.
참고
	딱 한번 개발자가 this를 사용해야 하는 경우는 가끔 지역변수와 멤버변수의 이름이 동일하게 만들어지는 경우
	이러면 그 함수는 지역변수를 우선적으로 사용하게 되는데, 멤버변수에 데이터가 기억되지 않을 수 있어서
	이때 굳이 이 변수가 멤버 변수임을 반드시 밝혀야 되는 경우가 있다. 이때 강제로 this. 써준다.
------
속성
	static속성
		static영역에 생기는 함수나 변수에 붙여주는 속성
	참고]
		클래스, 함수, 변수를 만들때 속성을 지정할 수 있다.
	예]
		[접근지정자] [속성] class 클래스이름{}
		[접근지정자] [속성] 반환값타입  함수이름(매개변수리스트){}
		[접근지정자] [속성] 데이터타입  변수이름;
	static영역의 특징
		1.프로그래이 실행되기 위해JVm이 로딩되는 순간 저절로 생기는 영역이다.
			사용자가 특별히 요구하지 않아도 자동으로 생기는 영역
		2.한번 생긴 변수, 함수는 두번 다시 생기지 않는다.**
	static변수
		static영역에 만들어지는 변수
		형식
			접근지정자 static [속성] 데이터타입 변수이름//속성 두개 들어올 수 있음 예) public static final int BLACK
		특징
			여러 객체가 공동으로 사용하는 변수
			왜? - 오브젝트를 100개를 만들어도 static 변수는 static영역에 한번만 올려지기 때문에 
			데이터의 내용을 바꾸면 다른 객체들도 바뀐 데이터를 쓰게 된다.
			
			따라서 static변수는 오브젝트의 의미가 없고, 오브젝트가 없어서 사용할 수 있다.
			
			new시키지 않아도 사용할 수 있는 변수
			이미 static영역에 올라가 있기때문에
------
	static변수에는 this를 붙일 수 없다.
------
	static함수
		static변수와 마찬가지로 static영역에 올려지는 함수 따라서 객체를 만들지 않아도 사용할 수 있는 함수
		사용법
			클래스이름.함수이름();
		특징]
			this를 사용할 수 없다
		결론
			static 함수 안에서는 메모리에 올려진 것들만 사용할 수 있다.
			일반함수 안에서는 static멤버 그리고 일반 멤버도 사용가능하다.
------
	멤버변수의 초기화
		멤버변수는 Heap영역에 생기므로 자동 초기화가 된다. 하지만 가끔은 변수의 기본적인 값을 지정할 필요가 있다.
		1.명시적 초기화
			변수를 선언하면서 값을 대입하는 것, 가장먼저 실행된다.
				class Test {
					int no = 10; <-명시적 초기화
				}
		2.초기화 블럭을 이용한 초기화
			이것은 인스턴스 변수에 한해서만 가능한 방법, 두번째로 실행된다.
				{
					이 안에서 데이터를 변수에 입력
				}
		3.static블럭을 이용한 초기화
			2번과 마찬가지로 static변수에 한해서 가능한 방법, 두번째로 실행된다.
				static{
					데이터입력
				}
		4.생성자를 이용한 초기화
			가장 마지막에 실행되는 방법, 생성자 내에서 초기화 실행
------
객체지향 언어의 특징
상속
	이미 만들어진 클래스의 기능(변수와 함수의 기능을 그대로 복사해와서)을 그대로 부여받아서 새로운 클래스를 만드는 방법
	소프트웨어 개발 속도를 빠르게 하기위한 방법의 한가지. 즉, 상속은 객체지향에서 매우 중요한 역할을 함
	객체지향 언어는 부품단위(클래스)로 프로그램을 만든후 그 부품을 조립해서 원하는 결과를 얻어내는 것이다.
	
	어딘가에서 부품(클래스)을 구해서 가져왔는데 그 기능이 사용자 마음에 꼭 맞지 않을 수 있다. 이때 처음부터 다시 만들면?
	이 문제를 해결하기 위해 상속의 개념이 만들어짐
	
	상속은 자신이 만들고자 하는 부품과 가장 유사한 부품을 가지고 와서 일단 그 기능을 다 복사한 후
	1.없는 기능을 추가
	2.수정할 기능은 수정

	상속하는 형식
		접근지정자 [속성] class 클래스이름 extends 복사할클래스이름{}
	자바는 오직 단일 상속만 가능하다*
	예]
		class NewClass extends Old1, Old2{} <- X 잘못된 형식
		class NewClass extends Old1{} <- O 맞는 형식
	용어]
		상속을 해준 클래스 - 상위클래스, Super Class	부모
		상속을 받은 클래스 - 하위클래스, Sub Class		자식
		
	is a  => 상속 관계에 있는 클래스를 부르는 용어
		class Father{}
		class Son extends Father{}
		Son is a Father <- 성립
		
		Father f = new Son(); 		<- 성립
		Son s = (Son)new Father();	<- 성립, 괄호 안의 내용 없으면 안됨
		
	has a => 어떤 클래스 안에 다른 클래스를 멤버로 갖고있는 상태
		class Father{}
		class Son{
			Father f = new Father();
		}
		Son has a Father <- 성립
	
	상속관계에 있는 경우 생성자의 역할은
		하위 클래스가 생성되는 순간 상위 클래스의 객체가 자동생성
		생성되는 순간 상위 클래스의 생성자 함수가 호출된다.
		따라서 하위 클래스를 생성하면 상위 클래스의 기본 생성자 함수도 함게 실행된다.
		
		상위클래스의 생성자 함수가 호출될 때는 무조건 기본 생성자 함수가 호출된다.
	**참고
		super()
			상위 클래스의 특별한 생성자를 강제로 호출하는 기능을 가진 명령
			현재 클래스의 생성자 함수에서 상위 클래스를 호출하는 유일한 방법
		특징]
			1. 반드시 생성자 함수 안에서만 사용해야 한다
			2. 반드시 첫 줄 첫 문장으로만 올 수 있다.
		예]
			class Father{
				int no;
				public Father(){}
				public Father(int no){
					this.no = no;
				}				
			}
			----
			class Son extends Father{
				char ch;
				public Son(){}
				public Son(int no, char ch){
					super(no);
					this.ch = ch;;
				}
			}
-------
**
함수의 오버라이딩(Overriding:함수의재정의)
	상속관계에 있는 하위 클래스에서 상위 클래스가 사지고있는(물려준) 함수의 기능을 수정하는 행위
방법
	0. 상위클래스에 함수가 존재해야 한다.
	1. 상위 클래스가 가진 함수의 원형(Prototype)과 동일한 원형으로 만들어야 한다.
		함수의원형이란:반환값+함수의이름+매개변수리스트
	2. 접근지정자는 같거나 넓은 방향으로 기술한다.
	3. 예외처리는 같거나 좁은 방향으로..
오버라이딩을 하면 내부적으로 Super의 함수가 숨겨지고 재정의한 함수가 사용되게 된다.
	public void abc(){}
	
	public void abc(){//상속후 오버라이딩 함수
	"만세"
	}
	상속받은 클래스에서 abc(); 할 수 있고 Super.abc()하여 상위클래스의 함수도 호출가능
-------
Object 클래스
	자바로 만들어진 클래스 들의 최상위 클래스
	따라서 자바로 만들어진 모든 클래스는 Object가 제공하는 모든 기능(멤버:변수, 함수)을 자동적으로 사용할 수 있게 됩니다.
	
	Object o = new Abc(); 아시아인 타입의 객체에 한국인객체를 만들어서 넣는다 : 다형성
	참고]
		최상위 클래스를 만들어 놓은 이유는 계층추적을 원활하게 하기 위한 조치임.
		즉, 각각의 클래스의 족보를 정확히 따질 수 있도록 하기 위함이다.
		자바로 만든 모든 클래스는 반드시 상위 클래스를 갖고있다. 내가직접 만든 클래스들도 상위 클래스가 있다.
		만약 상위 클래스를 지정하지 않으면(extends 클래스 이름, 라고 작성하지 않으면)
		묵시적으로Object라는 클래스를 상속받아서 만들어지게 되어있다.
	instanceof
		특정 클래스를 new시키면 주소가 만들어지는데, 이 주소가 어떤 클래스의 주소인지를 알아내는 연산자.
		연산의 결과는true 아니면false로 만들어진다.
	형식]
		주소 instanceof 클래스이름
	의미
		주소가 가리키는 내용이 지정한 클래스 소속인지를 묻는다 -> true false
		소속이라는 개념은 is a 관계를 따지는것이고 상속관계를 따지는 개념이 소속이라는 것
---
package와 import
	package란? 자바프로그램(소스코드)가 돌어있는 폴더를 자바에서 부르는 용어
	자바는 오픈소스, 모든 사람이 자신이 만든 프로그램을 제공할 수도, 다른사람의 것을 이용할 수 도 있다.
	그러다보니 클래스 이름에서 문제점이 발생했는데, 이런 문제를 해결하기 위해서 만들어 둔 한가지 방법이 바로 패키지
	즉, 소스를 만드는 사람이 그 프로그램이 포함되는 폴더이름까지 정해서 프로그램을 만들도록 한 것.
	결론적으로 자바로 프로그램을 만들때는 이 프로그램이 어떤 폴더에 저장되어 있는지를 알려주도록 해 두었다.]
	명령]
		package 폴더이름; <- 클래스 맨~~~ 윗줄
	참고]
		패키지 이름을 만드는 권장사항
			자신이 사용하는 도메인을 거꾸로 쓴 후 그 다음에 다시 폴더이름을 붙여서 만들어준다.
			이때 경로의 구분자는/를 쓰는것이 아닌.으로 구분하여 처리한다.
	예]
		githrd.com
			com.githrd.t0310
	import란?
		자신이 사용할 클래스가 어느 폴더(패키지)에 있는 클래스를 사용할 것인지를 밝혀주기 위한 명령
	예]
		Sample.Test.class
		Dongsoo.Test.class
	
	import Dongsoo.Test;
	형식]
		1.import 패키지경로.클래스이름;
			지정한 폴더의 지정한 클래스를 사용할 예정임을 밝히는 것
		2.import 패키지경로.*;
			지정한 폴더의 안에 있는 모든 클래스(or 그 중 일부를) 사용할 예정임을 밝히는 것
	주의]
		t1이라는 폴더 안에 s1이라는 폴더와 s2라는 폴더가 있고 Test01.java, Test02.java 클래스가 있다.
		그리고 s2 폴더내에 Test1.java, Test2.java, Test3.java 클래스가 있다.
		
		이 때 import t1.*;라고 명령하게 되면 Test01.java, Test02.java만 사용할 준비가 되는 것
		만약 Test1을 사용하려면 import t1.s2.*; 라고 해야 한다.
		
		따라서 *기호를 사용 한 import명령은 하위의 패키지 내의 클래스까지 사용할 준비를 하는 것이 아닌, 해당폴더의 직속 클래스만 사용할 수 있는것
		
		클래스 이름을 명시한 1번 형식을 우선적으로 적용 시킨다.
		sample.Test.java
		test.Test.java
			가 있고
		import test.Test.java;
		import sample.*;
			으로 작성했다면
			test.Test 클래스를 사용하게 된다.
	참고]
		import를 하지 않아도 명시적으로 사용할 수 있는 패키지가 있는데 java.lang패키지임
		VJM이 기본적으로 찾아보는 패키지이기 때문
---
static import
	static 멤버는 원칙적으로 클래스이름 . 멤버이름 형식으로 사용한다.
	Math.PI라던지
	Math.random이라던지
	넘 길어
	이때 static멤버앞에 사용하는 클래스이름조차 생략할 수 있다.
	이와같이 생략할 수 있도록 하는 방법이 static import이다.
	형식]
		import static 패키지경로 . 클래스이름;
---
final속성
	1. final 변수	-> 이 변수는 수정할 수 없는 변수이다. 현재값을 유지해야만 한다. 선언과 동시에 초기화를 하는 것이 일반적
	2. final 함수	-> 이 함수는 오버라이드(함수의 재정의)가 불가능한 함수가 된다. 따라서 이 함수는 매우 중요한 함수이므로 함부로 기능을 바꾸지 말고 현재 기능 그대로 사용할 것 이라는 의미
	3. final 클래스	-> 이 클래스는 더이상 상속이 불가능한 클래스 임을 밝히는 속성. 기능을 추가 혹은 변경치 말고 현재 그대로만 이용하라는 의미

상위 클래스의 타입변수로 하위클래스의 인스턴스를 기억하는 경우
변수는 레퍼런스쪽을 따르고 함수는 인스턴스쪽을 따른다.
단, 레퍼런스쪽에 실행하려는 함수가 존재해야 한다.





































