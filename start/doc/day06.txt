#day06

for 명령 참고
	선조건 처리 명령이다.
	for(;;)처럼 안의 내용을 기술하지 않아도 무방합니다.
	이 때 조건식은 할상 true로 처리됨.
	
while 명령
	선조건 처리명령
	for 명령과는 구분되게 형식 내부에 카운터 변수 선언부가 없음
	따라서 카운터 변수 실행횟수를 제어하고자 한다면 반드시 명령이 시작되기 전에 
	카운터 변수를 선언, 및 초기화를 해 주고 명령 내부에서 증감하여 횟수를 제거해야 한다.
	
do - while 명령
	후조건 처리명령
	악조건(false?)이라해도 적어도 한 번 실행 내용을 실행하는 반복문

참고] 
	지역변수
		해당 블럭 내에서만 사용할 수 있는 변수
	전역변수
		클래스 내의 어디서든지 사용할 수 있는 변수를 의미한다.
--------------------------
flag 기법
	프로그램을 실행하다 보면, 두가지 이상의 경우가 발생되는 순간이 옴.
	그 후에 어떤 경우가 발행했는지 알아보는 방법
	
--------------------------------------
	ex) for(;;){
			실행내용1
			
			if(조건) {
				break;
			}
			실행내용2
		}
		(1)
-------------------------------------

		실행내용1 의 경우는 반복문의 마지막 회차까지 실행되었는지 여부는 판별하기 어렵다.
		실행내용2 의 경우도 마찬가지.
		==(1)번 부분은 for 명령이 종료되면 실행되는 부분
		
		이때 (1) 부분을 실행할 때 위의 반복문이 정상적으로 모두 반복을 해어 실행이 되었는지 
		아니면 중간에 break명령으로 종료되었는지를  판별하는 기법을 flag기법이라 한다.
		
		방법 시작하기 전에 변수에 특정 데이터를 기억시켜 놓고 특정 순간이 발생하면
		변수의 데이터를 변경을 시킨다.
		
--------------------------------------
	ex) 
		boolean a = true;   // <- 추가
		for(;;){
			실행내용1
			
			if(조건) {
				a=false;   // <- 추가
				break;
			}
			실행내용2
		}
		(1)
-------------------------------------

레이블이 붙은 반복문 
	사용방법]
		레이블이름:										//<- loop레이블 호출받음
			for(;;){
				for(;;){
					실핼내용1
					if(){
						break 또는 continue 레이블이름: //<- loop레이블 호출
						}
				}
			}

	ex)
		2 x 1 = 2
		   ...
		3 x 1 = 3
		   ...
		5 x 1 = 5
		5 x 2 = 10
		   중단

주의사항
	레이블을 사용한 제어는 반드시 소속 반복문에 한해서만 적용이 된다.

	ex)
		for(){
		
			loop:					//<-- 레이블 위치 호출 불가
			for(){
				for(){
				
				}
			}
			for(){
				for(){
					if(){
						break loop:  //<-이 경우는 호출 불가능하다
					}
				}
			}
		}
-------------------------------------
continue 명령
	반복문에만 사용되는 명령
	현재 반복을 중지하고 다음 반복을 처리하도록 하는 것
	==> 즉 현재 작업을 중지시키고
		현재 작업은 무의미 하니, 더이상 진행하지말고 다음 반복작업을 진행하도록 하는것
	주의사항
		반복 명령문에 따라서 실행 위치가 달라진다.
		for(카운터변수 초기화;조건식;증감식){
			if(){
				continue;
			}
		}
	위처럼 for반복문일 경우는 continue명령을 만나면 증감식으로 실행을 진행한다.
	while(조건식){
		if(){
			continue;
		}
	}
	위의 경우처럼 while 반복문에 경우는 continue 명령을 만나면 반복문의 조건식을 실행한다.
-------------------------------------
do-while명령
	do{
		(1)
		continue
		(2)
	}while(조건식(3));
	
	(1)->continue->(3)->참->(1)
						거짓->(4)
-------------------------------------
contiue 명령 역시 감싸고 있는 반복문에 레이블을 붙여서 제어 가능
-------------------------------------












