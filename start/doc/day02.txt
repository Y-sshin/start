	함수는 함수 자신이 스스로 실행되는 경우는 없다.
	함수는 반드시 누군가 호출해야 실행이 된다.
	
	함수를 호출하는 형식 ]
		
		함수이름([데이터])
		
	클래스가 실행되기 위해서는 JVM에 의해서 실행되는 함수가 있어야 한다.
	
	문제는 JVM은 아무 함수나 사용하는 것이 아니고
	오직
		"public static void main(String[] args)"
	이 함수만 호출을 하게된다.
	
	=> 이처럼 어떤 프로그램이 시작하는 함수를 시작하는 함수를 진입점 함수라고 이야기 한다.
	
--------------------------------------------------------------------
클래스 안에는 필요한 함수나 필요한 변수를 포함 할 수 있다.
클래스 안에 일반 명령은 절대로 올 수 없다.

이때 클래스에 포함되는 함수, 변수를 멤버라고 부른다.
이때 멤버로 만들어진 변수를 "Field" 라고 부른다.

멤버중 속성이 static인 멤버는 static멤버라고 부른다.

static멤버의 특징
	1. static영역에 실행되는 순간 미리 올려지는 멤버들이다.
	2. 해당 멤버가 소속된 클래스를 new 시켜서 메모리에 올려두지 않아도 
		그 멤버는 사용할 수있다.
	3. static 영역에 올려지는 멤버는 같은 이름으로 여러개 올려질 수 없다.
		=>변수의 경우하나를 공유해서 사용하게 되는 결과가 생긴다
	4. static함수에서는 static멤버만(메모리에 기억되어있는 멤버만...) 사용할 수 있다.
	
결론적으로
	
	public class Test{
		int num;
		float area;  //변수도 포함 할 수 있다.
		public void xyz(){
		}
		public void abc(){
		}           //함수도 포함 할 수 있다.
		public static void main(String[] args){
			실행내용
		}
	}
---------------------------------------------------------------------
상수와 변수
	
	1)상수
		=>개발자가 프로그램에게 알려주는 (정보)데이터
	예 ]
		System.out.println("Hello");
		의 경우 "Hello"는 상수(Literal)이다.
		
	문제는 상수는 "Literal Pool"아러는 장소에 일단 저장한 후 사용되도록 되어있다.
	
	예 ]
		System.out.println("Hello"); 라고 명령을 하면 
			1) 먼저 리터럴 풀에 "Hello"라는 데이터 자체를 기억시켜 놓고
				<== 이때 이터럴 풓은 메모리 영역이고
					기억되는 데이터는 주소를 가지게 된다.
			2) 리터럴 풀에 기억된 데이터를 꺼내서 출력하게 된다.
	종류 ]
	
		1) 정수형
			일반적인 소수점이 없는 숫자 예) 10(십진수) 010(팔진수) 0x10(16진수)
		2) 실수형
			소수점이 존재하는 숫자를 의미하고 예) 3.14(일반적인 소수방식) 3.0e5(지수방식->3.0*10의5제곱)
		3) 논리형
			참과 거짓을 의미하는 데이터
				true 
				false
				=>위의 2가지 이 외에는 논리형을 표현할 수 없음(자바의 경우)
				
				boolean bool = true;
		4) 문자형
			오진 한글자로만 구성된 문자를 의미한다
			--> 내부적으로는 입력한 문자를 uni code방식으로 변환하여 기억하게 된다.
			'a' -97이라는 정수를 사용하여 기억한다.
				이때 사용되는 97이라는 숫자는 ascii 코드값이다.
			'\u0000' - 실제 유니코드 값으로 문자를 기억할 수 있다.
				0000은 원하는 문자에 해당하는 Uni code 값
		5) 문자열형
			한글자 이상으로 구성된 문자를 의미한다.
			=>엄밀히 말하면 기본상수는 아니다
				개발자입장에서 매우 빈번하게 사용하는 형태이므로
				포함시켜놓았다.
-------------------

2.변수 
	참고 ]
		변수의 필요성
			개발자가 입력한 데이터는 일단 리터럴 풀에 저장된다.
			그리고 프로그램이 리터럴 풀에 있는 데이터를 꺼내서 사용하게 된다.
			
			리터럴 풀은
			주소를 모르면 사용할 수 없다
			(반드시 주소를 알아야 사용할 수 있다.)
			
			변수는 리터럴 풀에 저장된 데이터를 개발자가 필요한 순간에 다시 재사용할 수 있도록
			저장된 주소를 기억해 놓는 역할을 한다.
			
	참고 ]
		Stack 의 특징
			1.메모리에 별칭을 붙여서 사용할 수 있는 영역이다.
				(별칭은 개발자가 붙이는 것이므로
					개발자가 가장 손쉽게 사용할 수 있는 영역이다)
			2.8개 영역 중에서 리터럴 풀 다음으로 가장 작은 영역을 운영체제에서 배정받는다.
				(따라서 Stack에는 많은  양의 데이터를 보관하면 문제가 생길 수 있다.)
-------------------------------

	리터럴 풀에 있는 데이터를 Stack에서 기억하는 방법
		1. Stack에 필요한 메모리를 할당 받는다.
			
			형식 ]
				데이터타입 변수이름;
				
				=>데이터 타입의 기술은 2가지 의미를 담고있다.
					1)기억할 데이터의 형태
					2) 필요한 메모리의 크기
					
				참고 ]
					변수 이름은 앞에서 설명한 Stack에 붙이는 별칭이다.
					따라서 변수 이름만 기억하고 있으면 언제든지
					이 변수가 기억하고 있는 데이터를 사용할 수 있게 된다.
				참고 ]
					데이터 타입에 의한 변수의 분류
						1. 기본형 변수
							-자바에서 제공해주는 기본 데이터 타입의 데이터를 기억할 변수
							
							참고 ]
								자바의기본 데이터 타입
									논리형
										boolean-1byte
									문자형
										char-2byte
									정수형
										byte-1byte
										short-2byte
										int-4byte
										long-8byte
									실수형
										float-4byte
										double-8byte
						2. 참조형 변수
							= 기본형 데이터 이외의 모든 데이터를 기억하는 변수(클래스를 기억하는 변수)
		
		2. 대입 (기억) 연간자를 이용해서 필요한 데이터를 디억한다.
			형식 ]
				변수이름 = 데이터;
			예 ]
				no = 10;
	참고 ]
		Stack 영역에 메모리를 할당 받는 방법
		JVM에게 할당받은 메모리 크기와 그 안에 저장할 데이터 형태를 알려줘야 한다.
		
====================

자바 프로그램 토큰 구분
==> 컴파일러는 토큰 단위로 번역을 시도한다.
	따라서 개발자는 컴파일러가 번역을 하는 토큰을 구분해 줘야 한다.
	이것이";"라는 기호를 이용해서 구분하게 된다.
	우리가 습관적으로 
		int no =10;
	했던 의미는 토큰을 구분하기 위한 기호였다.
	
	결과적으로 토큰은 하나의 명령이 종료되었음을 알려주는 기호가 된다.
	만약 개발자가 토큰을 구분을 하지 않으면 오류가 발생할 수 있다.
	
	예 ]
		int no1 = 10
		int no2 = 20;
		==> 컴파일러는 두 줄을 하나의 명령으로 인식하여 처리하게 될 것이고, 이런 명령 형식은 존재하지 않는다.
	예 ]
		int no1 = 10; int no2 = 10;
		=> 한 줄로 입력해지만 두 개의 명령으로 인식해서 먼저 no1을 처리하고 그  명령이 처리된 후 no2에 대한 명령을 처리하게 된다.
	참고 ]
		;대신 }기호가 그 역할을 대신할 수 있다.
		예 ]
			if(조건식){
				실행문
			}
			
		






